#!/usr/bin/env bash
set -uf -o pipefail


usage="Usage: $(basename "$0") [<commit-message>]
   or: $(basename "$0") git [<args>...]

In the first form: Synchronize the repository with the remote by
committing all files, pulling and then pushing. If provided, use
the commit message passed as an argument.

In the second form: Provide shortcuts for git commands ran as if
inside the synchronized directory."


synced_dir="${HOME}/notes"
git_commit_msg="Sync"
git_dir=""


die() {
  >&2 echo "$1"
  exit 1
}

set_git() {
  git_dir="${1%/*}"

  while [[ ! -d "${git_dir}" && "${git_dir%/*}/" == "${synced_dir%/}/"* ]]; do
    git_dir="${git_dir%/*}"
  done

  [[ $(git -C "${git_dir}" rev-parse --is-inside-work-tree 2>/dev/null) \
    == true ]] || git_dir=""
}

cmd_git() {
  set_git "${synced_dir}/"

  if [[ "$1" == "init" ]]; then
    git_dir="${synced_dir}"
    git -C "${git_dir}" "$@" || exit 1
    git_add "${synced_dir}"
    git_commit "Initialize the repository"
  elif [[ -n "${git_dir}" ]]; then
    git -C "${git_dir}" "$@"
  else
    die "Error: Git repository not initialized."
  fi
}

git_add() {
  [[ -n "${git_dir}" ]] || return
  git -C "${git_dir}" add "$1" || return
  [[ -n $(git -C "${git_dir}" status --porcelain "$1") ]] || return
}

git_commit() {
  [[ -n "${git_dir}" ]] || return
  git -C "${git_dir}" commit -m "$1"
}

git_pull() {
  [[ -n "${git_dir}" ]] || return
  git -C "${git_dir}" pull
}

git_push() {
  [[ -n "${git_dir}" ]] || return
  git -C "${git_dir}" push
}

main() {
  local commit_msg="${git_commit_msg}"

  # Show usage.
  if [[ "$#" -gt 0 && "$1" == "-h" ]]; then
    echo "${usage}"
    exit 0
  fi

  # Check whether the directory exists.
  if [[ ! -d "${synced_dir}" ]]; then
    die "Error: The directory ${synced_dir} does not exist."
  fi

  # Check whether the git repository is initialized.
  git -C "${synced_dir}" rev-parse 2>/dev/null \
    || die "Error: Git repository not initialized."

  # Parse arguments.
  if [[ "$#" -gt 0 ]]; then
    case "$1" in
      # Invoke git with the rest of the arguments.
      git) shift; cmd_git "$@"; exit "$?" ;;
      # Assume that the first argument is a commit message.
      *) commit_msg="$1" ;;
    esac
  fi

  # Synchronize.
  set_git "${synced_dir}/"
  git_add "${synced_dir}"
  git_commit "${commit_msg}"
  git_pull
  git_push
}


main "$@"
