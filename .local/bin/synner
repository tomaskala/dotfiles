#!/bin/bash
set -uf -o pipefail


__USAGE="Usage: $(basename "$0") [<commit-message>]
   or: $(basename "$0") git [<args>...]

In the first form: Synchronize the repository with the remote by
committing all files, pulling and then pushing. If provided, use
the commit message passed as an argument.

In the second form: Provide shortcuts for git commands ran as if
inside the synchronized directory."


SYNCED_DIR="${HOME}/notes"
GIT_COMMIT_MSG="Sync"
GIT_DIR=""


function die {
  >&2 echo "$1"
  exit 1
}

function set_git {
  GIT_DIR="${1%/*}"

  while [[ ! -d "${GIT_DIR}" && "${GIT_DIR%/*}/" == "${SYNCED_DIR%/}/"* ]]; do
    GIT_DIR="${GIT_DIR%/*}"
  done

  [[ $(git -C "${GIT_DIR}" rev-parse --is-inside-work-tree 2>/dev/null) \
    == true ]] || GIT_DIR=""
}

function cmd_git {
  set_git "${SYNCED_DIR}/"

  if [[ "$1" == "init" ]]; then
    GIT_DIR="${SYNCED_DIR}"
    git -C "${GIT_DIR}" "$@" || exit 1
    git_add "${SYNCED_DIR}"
    git_commit "Initialize the repository"
  elif [[ -n "${GIT_DIR}" ]]; then
    git -C "${GIT_DIR}" "$@"
  else
    die "Error: Git repository not initialized."
  fi
}

function git_add {
  [[ -n "${GIT_DIR}" ]] || return
  git -C "${GIT_DIR}" add "$1" || return
  [[ -n $(git -C "${GIT_DIR}" status --porcelain "$1") ]] || return
}

function git_commit {
  [[ -n "${GIT_DIR}" ]] || return
  git -C "${GIT_DIR}" commit -m "$1"
}

function git_pull {
  [[ -n "${GIT_DIR}" ]] || return
  git -C "${GIT_DIR}" pull
}

function git_push {
  [[ -n "${GIT_DIR}" ]] || return
  git -C "${GIT_DIR}" push
}

function main {
  local commit_msg="${GIT_COMMIT_MSG}"

  # Show usage.
  if [[ "$#" -gt 0 ]] && [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "${__USAGE}"
    exit 0
  fi

  # Check whether the directory exists.
  if [[ ! -d "${SYNCED_DIR}" ]]; then
    die "Error: The directory ${SYNCED_DIR} does not exist."
  fi

  # Check whether the git repository is initialized.
  git -C "${SYNCED_DIR}" rev-parse 2>/dev/null \
    || die "Error: Git repository not initialized."

  # Parse arguments.
  if [[ "$#" -gt 0 ]]; then
    case "$1" in
      # Invoke git with the rest of the arguments.
      git) shift; cmd_git "$@"; exit "$?" ;;
      # Assume that the first argument is a commit message.
      *) commit_msg="$1" ;;
    esac
  fi

  # Synchronize.
  set_git "${SYNCED_DIR}/"
  git_add "${SYNCED_DIR}"
  git_commit "${commit_msg}"
  git_pull
  git_push
}


main "$@"
