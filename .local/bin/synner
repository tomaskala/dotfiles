#!/bin/sh
set -euf


usage="Usage: $(basename "$0") [<commit-message>]
   or: $(basename "$0") git [<args>...]

In the first form: Synchronize the repository with the remote by
committing all files, pulling and then pushing. If provided, use
the commit message passed as an argument.

In the second form: Provide shortcuts for git commands ran as if
inside the synchronized directory."


synced_dir=~/notes
commit_msg="Sync"


die() {
  printf '%s\n' "$1" >&2
  exit 1
}

cmd_git() {
  if [ "$1" = "init" ]; then
    mkdir -p "${synced_dir}"
    git -C "${synced_dir}" "$@"
    git -C "${synced_dir}" add -A
    git -C "${synced_dir}" commit -m "Initialize the repository"
  elif [ "$(git -C "${synced_dir}" rev-parse --is-inside-work-tree \
          2> /dev/null)" = true ]; then
    git -C "${synced_dir}" "$@"
  else
    die "Error: Git repository not initialized."
  fi
}


# Show usage.
if [ "$#" -gt 0 ] && [ "$1" = "-h" ]; then
  printf '%s\n' "${usage}"
  exit 0
fi

# Check whether the directory exists.
if [ ! -d "${synced_dir}" ]; then
  die "Error: The directory ${synced_dir} does not exist."
fi

# Parse arguments.
if [ "$#" -gt 0 ]; then
  case "$1" in
    # Invoke git with the rest of the arguments.
    git) shift; cmd_git "$@"; exit "$?" ;;
    # Assume that the first argument is a commit message.
    *) commit_msg="$1" ;;
  esac
fi

# Check whether sync is necessary.
if [ -z "$(git -C "${synced_dir}" status --porcelain)" ]; then
  exit 0
fi

# Synchronize.
cmd_git add -A
cmd_git commit -m "${commit_msg}"
cmd_git pull
cmd_git push
